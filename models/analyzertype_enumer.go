// Code generated by "enumer -type=AnalyzerType -trimprefix=Analyzer"; DO NOT EDIT.

package models

import (
	"fmt"
	"strings"
)

const _AnalyzerTypeName = "LoopDeferOptimizationSliceMapStringReflectionInterfaceRegexTimeMemoryLeakGCPressureSyncPoolGoroutineChannelRaceConditionConcurrencyPatternsHTTPClientHTTPReuseIOBufferNetworkPatternsDatabaseSerializationCryptoPrivacyContextErrorHandlingAPIMisuseAIBullshitCGOTestCoverageDependencyCPUOptimizationTypeMax"

var _AnalyzerTypeIndex = [...]uint16{0, 4, 21, 26, 29, 35, 45, 54, 59, 63, 73, 83, 91, 100, 107, 120, 139, 149, 158, 166, 181, 189, 202, 208, 215, 222, 235, 244, 254, 257, 269, 279, 294, 301}

const _AnalyzerTypeLowerName = "loopdeferoptimizationslicemapstringreflectioninterfaceregextimememoryleakgcpressuresyncpoolgoroutinechannelraceconditionconcurrencypatternshttpclienthttpreuseiobuffernetworkpatternsdatabaseserializationcryptoprivacycontexterrorhandlingapimisuseaibullshitcgotestcoveragedependencycpuoptimizationtypemax"

func (i AnalyzerType) String() string {
	if i >= AnalyzerType(len(_AnalyzerTypeIndex)-1) {
		return fmt.Sprintf("AnalyzerType(%d)", i)
	}
	return _AnalyzerTypeName[_AnalyzerTypeIndex[i]:_AnalyzerTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AnalyzerTypeNoOp() {
	var x [1]struct{}
	_ = x[AnalyzerLoop-(0)]
	_ = x[AnalyzerDeferOptimization-(1)]
	_ = x[AnalyzerSlice-(2)]
	_ = x[AnalyzerMap-(3)]
	_ = x[AnalyzerString-(4)]
	_ = x[AnalyzerReflection-(5)]
	_ = x[AnalyzerInterface-(6)]
	_ = x[AnalyzerRegex-(7)]
	_ = x[AnalyzerTime-(8)]
	_ = x[AnalyzerMemoryLeak-(9)]
	_ = x[AnalyzerGCPressure-(10)]
	_ = x[AnalyzerSyncPool-(11)]
	_ = x[AnalyzerGoroutine-(12)]
	_ = x[AnalyzerChannel-(13)]
	_ = x[AnalyzerRaceCondition-(14)]
	_ = x[AnalyzerConcurrencyPatterns-(15)]
	_ = x[AnalyzerHTTPClient-(16)]
	_ = x[AnalyzerHTTPReuse-(17)]
	_ = x[AnalyzerIOBuffer-(18)]
	_ = x[AnalyzerNetworkPatterns-(19)]
	_ = x[AnalyzerDatabase-(20)]
	_ = x[AnalyzerSerialization-(21)]
	_ = x[AnalyzerCrypto-(22)]
	_ = x[AnalyzerPrivacy-(23)]
	_ = x[AnalyzerContext-(24)]
	_ = x[AnalyzerErrorHandling-(25)]
	_ = x[AnalyzerAPIMisuse-(26)]
	_ = x[AnalyzerAIBullshit-(27)]
	_ = x[AnalyzerCGO-(28)]
	_ = x[AnalyzerTestCoverage-(29)]
	_ = x[AnalyzerDependency-(30)]
	_ = x[AnalyzerCPUOptimization-(31)]
	_ = x[AnalyzerTypeMax-(32)]
}

var _AnalyzerTypeValues = []AnalyzerType{AnalyzerLoop, AnalyzerDeferOptimization, AnalyzerSlice, AnalyzerMap, AnalyzerString, AnalyzerReflection, AnalyzerInterface, AnalyzerRegex, AnalyzerTime, AnalyzerMemoryLeak, AnalyzerGCPressure, AnalyzerSyncPool, AnalyzerGoroutine, AnalyzerChannel, AnalyzerRaceCondition, AnalyzerConcurrencyPatterns, AnalyzerHTTPClient, AnalyzerHTTPReuse, AnalyzerIOBuffer, AnalyzerNetworkPatterns, AnalyzerDatabase, AnalyzerSerialization, AnalyzerCrypto, AnalyzerPrivacy, AnalyzerContext, AnalyzerErrorHandling, AnalyzerAPIMisuse, AnalyzerAIBullshit, AnalyzerCGO, AnalyzerTestCoverage, AnalyzerDependency, AnalyzerCPUOptimization, AnalyzerTypeMax}

var _AnalyzerTypeNameToValueMap = map[string]AnalyzerType{
	_AnalyzerTypeName[0:4]:          AnalyzerLoop,
	_AnalyzerTypeLowerName[0:4]:     AnalyzerLoop,
	_AnalyzerTypeName[4:21]:         AnalyzerDeferOptimization,
	_AnalyzerTypeLowerName[4:21]:    AnalyzerDeferOptimization,
	_AnalyzerTypeName[21:26]:        AnalyzerSlice,
	_AnalyzerTypeLowerName[21:26]:   AnalyzerSlice,
	_AnalyzerTypeName[26:29]:        AnalyzerMap,
	_AnalyzerTypeLowerName[26:29]:   AnalyzerMap,
	_AnalyzerTypeName[29:35]:        AnalyzerString,
	_AnalyzerTypeLowerName[29:35]:   AnalyzerString,
	_AnalyzerTypeName[35:45]:        AnalyzerReflection,
	_AnalyzerTypeLowerName[35:45]:   AnalyzerReflection,
	_AnalyzerTypeName[45:54]:        AnalyzerInterface,
	_AnalyzerTypeLowerName[45:54]:   AnalyzerInterface,
	_AnalyzerTypeName[54:59]:        AnalyzerRegex,
	_AnalyzerTypeLowerName[54:59]:   AnalyzerRegex,
	_AnalyzerTypeName[59:63]:        AnalyzerTime,
	_AnalyzerTypeLowerName[59:63]:   AnalyzerTime,
	_AnalyzerTypeName[63:73]:        AnalyzerMemoryLeak,
	_AnalyzerTypeLowerName[63:73]:   AnalyzerMemoryLeak,
	_AnalyzerTypeName[73:83]:        AnalyzerGCPressure,
	_AnalyzerTypeLowerName[73:83]:   AnalyzerGCPressure,
	_AnalyzerTypeName[83:91]:        AnalyzerSyncPool,
	_AnalyzerTypeLowerName[83:91]:   AnalyzerSyncPool,
	_AnalyzerTypeName[91:100]:       AnalyzerGoroutine,
	_AnalyzerTypeLowerName[91:100]:  AnalyzerGoroutine,
	_AnalyzerTypeName[100:107]:      AnalyzerChannel,
	_AnalyzerTypeLowerName[100:107]: AnalyzerChannel,
	_AnalyzerTypeName[107:120]:      AnalyzerRaceCondition,
	_AnalyzerTypeLowerName[107:120]: AnalyzerRaceCondition,
	_AnalyzerTypeName[120:139]:      AnalyzerConcurrencyPatterns,
	_AnalyzerTypeLowerName[120:139]: AnalyzerConcurrencyPatterns,
	_AnalyzerTypeName[139:149]:      AnalyzerHTTPClient,
	_AnalyzerTypeLowerName[139:149]: AnalyzerHTTPClient,
	_AnalyzerTypeName[149:158]:      AnalyzerHTTPReuse,
	_AnalyzerTypeLowerName[149:158]: AnalyzerHTTPReuse,
	_AnalyzerTypeName[158:166]:      AnalyzerIOBuffer,
	_AnalyzerTypeLowerName[158:166]: AnalyzerIOBuffer,
	_AnalyzerTypeName[166:181]:      AnalyzerNetworkPatterns,
	_AnalyzerTypeLowerName[166:181]: AnalyzerNetworkPatterns,
	_AnalyzerTypeName[181:189]:      AnalyzerDatabase,
	_AnalyzerTypeLowerName[181:189]: AnalyzerDatabase,
	_AnalyzerTypeName[189:202]:      AnalyzerSerialization,
	_AnalyzerTypeLowerName[189:202]: AnalyzerSerialization,
	_AnalyzerTypeName[202:208]:      AnalyzerCrypto,
	_AnalyzerTypeLowerName[202:208]: AnalyzerCrypto,
	_AnalyzerTypeName[208:215]:      AnalyzerPrivacy,
	_AnalyzerTypeLowerName[208:215]: AnalyzerPrivacy,
	_AnalyzerTypeName[215:222]:      AnalyzerContext,
	_AnalyzerTypeLowerName[215:222]: AnalyzerContext,
	_AnalyzerTypeName[222:235]:      AnalyzerErrorHandling,
	_AnalyzerTypeLowerName[222:235]: AnalyzerErrorHandling,
	_AnalyzerTypeName[235:244]:      AnalyzerAPIMisuse,
	_AnalyzerTypeLowerName[235:244]: AnalyzerAPIMisuse,
	_AnalyzerTypeName[244:254]:      AnalyzerAIBullshit,
	_AnalyzerTypeLowerName[244:254]: AnalyzerAIBullshit,
	_AnalyzerTypeName[254:257]:      AnalyzerCGO,
	_AnalyzerTypeLowerName[254:257]: AnalyzerCGO,
	_AnalyzerTypeName[257:269]:      AnalyzerTestCoverage,
	_AnalyzerTypeLowerName[257:269]: AnalyzerTestCoverage,
	_AnalyzerTypeName[269:279]:      AnalyzerDependency,
	_AnalyzerTypeLowerName[269:279]: AnalyzerDependency,
	_AnalyzerTypeName[279:294]:      AnalyzerCPUOptimization,
	_AnalyzerTypeLowerName[279:294]: AnalyzerCPUOptimization,
	_AnalyzerTypeName[294:301]:      AnalyzerTypeMax,
	_AnalyzerTypeLowerName[294:301]: AnalyzerTypeMax,
}

var _AnalyzerTypeNames = []string{
	_AnalyzerTypeName[0:4],
	_AnalyzerTypeName[4:21],
	_AnalyzerTypeName[21:26],
	_AnalyzerTypeName[26:29],
	_AnalyzerTypeName[29:35],
	_AnalyzerTypeName[35:45],
	_AnalyzerTypeName[45:54],
	_AnalyzerTypeName[54:59],
	_AnalyzerTypeName[59:63],
	_AnalyzerTypeName[63:73],
	_AnalyzerTypeName[73:83],
	_AnalyzerTypeName[83:91],
	_AnalyzerTypeName[91:100],
	_AnalyzerTypeName[100:107],
	_AnalyzerTypeName[107:120],
	_AnalyzerTypeName[120:139],
	_AnalyzerTypeName[139:149],
	_AnalyzerTypeName[149:158],
	_AnalyzerTypeName[158:166],
	_AnalyzerTypeName[166:181],
	_AnalyzerTypeName[181:189],
	_AnalyzerTypeName[189:202],
	_AnalyzerTypeName[202:208],
	_AnalyzerTypeName[208:215],
	_AnalyzerTypeName[215:222],
	_AnalyzerTypeName[222:235],
	_AnalyzerTypeName[235:244],
	_AnalyzerTypeName[244:254],
	_AnalyzerTypeName[254:257],
	_AnalyzerTypeName[257:269],
	_AnalyzerTypeName[269:279],
	_AnalyzerTypeName[279:294],
	_AnalyzerTypeName[294:301],
}

// AnalyzerTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AnalyzerTypeString(s string) (AnalyzerType, error) {
	if val, ok := _AnalyzerTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AnalyzerTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AnalyzerType values", s)
}

// AnalyzerTypeValues returns all values of the enum
func AnalyzerTypeValues() []AnalyzerType {
	return _AnalyzerTypeValues
}

// AnalyzerTypeStrings returns a slice of all String values of the enum
func AnalyzerTypeStrings() []string {
	strs := make([]string, len(_AnalyzerTypeNames))
	copy(strs, _AnalyzerTypeNames)
	return strs
}

// IsAAnalyzerType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AnalyzerType) IsAAnalyzerType() bool {
	for _, v := range _AnalyzerTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
